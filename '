#include "efi.h"
// GLOBAL VARIABLES //
#define COL 80
#define ROW 25
typedef enum {
  UP,DOWN,LEFT,RIGHT
} DIRECTION;
typedef struct Vec2 {
  INTN X;
  INTN Y;
} Vec2;
EFI_SYSTEM_TABLE* ST;
Vec2 snake[COL-2*ROW-2] = { { .X=-1, .Y=-1 } };
UINTN snake_size = 0;
UINT8 grow = 0;
DIRECTION dir = RIGHT;

VOID init_board(VOID){
  // Initialize I/O
  ST->ConOut->SetMode(ST->ConOut, 0); // Screen is 80x25 characters
  ST->ConOut->Reset(ST->ConOut, 1);
  ST->ConIn->Reset(ST->ConIn, 1);
  ST->ConOut->EnableCursor(ST->ConOut, 1);
  // Draw borders
  for(UINT8 x=0; x<COL; x++) {
    for(UINT8 y=0; y<ROW; y++) {
        if (x==0 || x == COL-1 || y==1 || y==ROW-1) {
          ST->ConOut->SetCursorPosition(ST->ConOut, x, y);
          ST->ConOut->OutputString(ST->ConOut, u"#");
        }
    }
  }
  // Init snake
  snake[0].X=1;
  snake[0].Y=1;
  snake_size = 1;
}

void move_snake() {
    grow = 0;
}

void grow_snake() {
  grow = 1;
  snake_size+=1;
  snake[snake_size-1]=snake[snake_size-2];
}

void read_keyboard() {
  EFI_KEY_DATA keyData;
  UINTN idx;
  ST->BootServices->WaitForEvent(1, &ST->ConIn->WaitForKeyEx, &idx);
  ST->ConIn->ReadKeyStrokeEx(ST->ConIn, &keyData);
  if (keyData.Key.UnicodeChar == u'w') {
    dir = UP;
  }
  else if (keyData.Key.UnicodeChar == u's') {
    dir = DOWN;
  }
  else if (keyData.Key.UnicodeChar == u'a') {
    dir = LEFT;
  }
  else if (keyData.Key.UnicodeChar == u'd') {
    dir = RIGHT;
  }
  else if (keyData.Key.UnicodeChar == u' ') {
    grow_snake();
  }
}


void draw_snake() {
  ST->ConOut->SetCursorPosition(ST->ConOut, snake[0].X, snake[0].Y);
  ST->ConOut->OutputString(ST->ConOut, u"@");
}


EFI_STATUS efi_main(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE* SystemTable) {
  // TODO: remove this line when using input params
  (void)ImageHandle;
  ST = SystemTable;

  init_board();
  //Snake pos can be within (1,1) and (78,22)
  while(1) {
    /* TODO: Game over
    if (HEAD_X <=0 || HEAD_X >= COL-1 || HEAD_Y <= 0 || HEAD_Y >= ROW-1) {
      ST->ConOut->ClearScreen(ST->ConOut);
      ST->ConOut->SetAttribute(ST->ConOut, EFI_RED);
      ST->ConOut->OutputString(ST->ConOut, u"Game Over");
      break;
    } 
    */
    draw_snake();
    read_keyboard();
    if (dir==UP) {
      move_snake(0,-1);
    }
    if (dir==DOWN) {
      move_snake(0,1);
    }
    if (dir==LEFT) {
      move_snake(-1,0);
    }
    if (dir==RIGHT) {
      move_snake(1,0);
    }
    grow = 0;
  }

  ST->RuntimeServices->ResetSystem(EfiResetShutdown, EFI_SUCCESS, 0, 0);
  return EFI_SUCCESS;
}
